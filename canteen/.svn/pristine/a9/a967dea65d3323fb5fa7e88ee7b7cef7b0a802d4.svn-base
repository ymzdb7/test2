package com.winhands.modules.restaurant.controller;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.winhands.common.utils.PageUtils;
import com.winhands.common.utils.Query;
import com.winhands.common.utils.R;

import com.winhands.modules.restaurant.entity.AdDishesHeeEntity;
import com.winhands.modules.restaurant.service.AdDishesCountsService;
import com.winhands.modules.sys.controller.AbstractController;


/**
 * 预定菜品统计管理
 * 
 */

@RestController
@RequestMapping("/restaurant/adDishesCounts")
public class AdDishesCountsController  extends AbstractController{
	
	
	//日志
		private Logger logger = Logger.getLogger(this.getClass());
	@Autowired
	private AdDishesCountsService adDishesCountsService;
	//获取预定菜品计量单位列表

	@ResponseBody
	@RequestMapping("/list")	
	public R list(@RequestParam Map<String, Object> params){
		logger.info("进入预定菜品统计列表的方法list");
		//查询列表数据
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		String orderTime=(String)params.get("orderTime");
		String time=null;
		if(orderTime!=null) {
			time=orderTime;
		}else {
			time=sdf.format(new Date());
		}
	
		
	try {
		Date date = sdf.parse(time);
		Date monday = convertWeekByDate(date);
		Date thursday = nextday(monday, 3);
		String a=sdf.format(monday);
		String b=sdf.format(thursday);
		
		params.put("startTime",sdf.format(monday));
		params.put("endTime",sdf.format(thursday) );
		
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		logger.error(e.getMessage());
	}
		
	Query query = new Query(params);
	List<AdDishesHeeEntity> adDishesHeeList = adDishesCountsService.queryList(query);
	int total =6;
	/* adDishesCountsService.queryTotal(query)
	*/
	PageUtils pageUtil = new PageUtils(adDishesHeeList, total, query.getLimit(), query.getPage());
	
	logger.info("离开预定菜品统计列表的方法list");
		return R.ok().put("page", pageUtil);
	}
	
	
	
	//传入日期，获取传入日期的周一和周五的
	
		private Date convertWeekByDate(Date time) {  
			Map <String ,Object> map = new LinkedHashMap <String ,Object>();;
	        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd"); //设置时间格式  
	        Calendar cal = Calendar.getInstance(); 
	        Date monday = null;
	        cal.setTime(time);  
	        //判断要计算的日期是否是周日，如果是则减一天计算周六的，否则会出问题，计算到下一周去了  
	        int dayWeek = cal.get(Calendar.DAY_OF_WEEK);//获得当前日期是一个星期的第几天  
	        if(1 == dayWeek) {  
	          cal.add(Calendar.DAY_OF_MONTH, -1);  
	        }  
	        System.out.println("要计算日期为:"+sdf.format(cal.getTime())); //输出要计算日期  
	        cal.setFirstDayOfWeek(Calendar.MONDAY);//设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一  
	        int day = cal.get(Calendar.DAY_OF_WEEK);//获得当前日期是一个星期的第几天  
	        cal.add(Calendar.DATE, cal.getFirstDayOfWeek()-day);//根据日历的规则，给当前日期减去星期几与一个星期第一天的差值   
	        monday = cal.getTime();
	        String imptimeBegin = sdf.format(cal.getTime()); 
	        map.put("0", imptimeBegin);//周一
	        System.out.println("所在周星期一的日期："+imptimeBegin);  
			return monday;  
	           
	   }
		//当前天的后一天
		private Date nextday(Date time,int i) {  
	        Calendar cal = Calendar.getInstance(); 
	        Date nextday = null;
	        cal.setTime(time); 
	        cal.add(Calendar.DATE, i);
	        nextday=cal.getTime();
			return nextday;  
	           
	   }
	
	
}
